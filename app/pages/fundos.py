import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

st.set_page_config(page_title="Consolidador de Fundos", page_icon="üìà", layout="wide")

st.title("üìà Consolidador de Fundos")
st.write("Fa√ßa upload dos arquivos necess√°rios para consolidar os dados de resgates e aplica√ß√µes.")

nome_fundos_file = st.file_uploader("Upload do arquivo NOME-FUNDOS.xlsx", type="xlsx")
auc_file = st.file_uploader("Upload do arquivo AUC do dia (.xlsx, qualquer nome)", type="xlsx")

resgates_files = st.file_uploader("Upload dos arquivos de RESGATES (.xlsx)", type="xlsx", accept_multiple_files=True)
aplicacoes_files = st.file_uploader("Upload dos arquivos de APLICA√á√ïES (.xlsx)", type="xlsx", accept_multiple_files=True)

def consolidar_arquivos(arquivos, fundos_df):
    dfs = []
    for file in arquivos:
        df = pd.read_excel(file)

        if 'cnpj do fundo' not in df.columns:
            continue 

        df.rename(columns={'cnpj do fundo': 'CNPJ'}, inplace=True)
        df = df.merge(fundos_df, on='CNPJ', how='left')
        dfs.append(df)

    if dfs:
        return pd.concat(dfs, ignore_index=True)
    else:
        return pd.DataFrame()

def converter_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False)
    return output.getvalue()

if nome_fundos_file and auc_file and resgates_files and aplicacoes_files:
    fundos_df = pd.read_excel(nome_fundos_file)
    auc = pd.read_excel(auc_file)

    resgates = consolidar_arquivos(resgates_files, fundos_df)
    aplicacoes = consolidar_arquivos(aplicacoes_files, fundos_df)

    resgates.rename(columns={'n√∫mero da conta': 'C√≥digo da Conta', 'Nome do Fundo': 'Instrumento (Nome)'}, inplace=True)

    resgates_rt = resgates[resgates["tipo de resgate"] == "RT"]
    merged_df = resgates_rt.merge(auc, on=["C√≥digo da Conta", "Instrumento (Nome)"], how="left")
    merged_df = merged_df.groupby(['C√≥digo da Conta', 'Instrumento (Nome)'], as_index=False)['Valor Bruto'].sum()
    df_cleaned = merged_df.drop_duplicates(subset=['C√≥digo da Conta', 'Instrumento (Nome)'])

    colunas_remover = [
        "CNPJ", "CPF/CNPJ", "Nome da Conta", "Subclasse do Ativo", "Quantidade", "Pre√ßo",
        "Data de Aloca√ß√£o Inicial", "Categoria do Instrumento", "Data de Refer√™ncia",
        "Classe do Ativo", "Valor L√≠quido", "Taxa", "Nome Emissor", "Instrumento (S√≠mbolo)",
        "InvestorType", "valor do resgate"
    ]
    df_cleaned = df_cleaned.drop(columns=colunas_remover, errors='ignore')
    df_cleaned.rename(columns={'Valor Bruto': 'valor do resgate'}, inplace=True)
    df_cleaned['tipo de resgate'] = 'RT'

    resgates_rp = resgates[resgates["tipo de resgate"] == "RP"]

    resgates_fim = pd.concat([df_cleaned, resgates_rp], ignore_index=True).reset_index(drop=True)
    resgates_fim = resgates_fim.drop(columns=["CNPJ"], errors='ignore')

    resgates_por_fundo = resgates_fim.groupby('Instrumento (Nome)')['valor do resgate'].sum().reset_index()
    aplicacoes_por_fundo = aplicacoes.groupby('Nome do Fundo')['valor da aplicacao'].sum().reset_index()

    st.subheader("üìä Gr√°fico Comparativo de Resgates e Aplica√ß√µes")
    fig, ax = plt.subplots(figsize=(12, 6))
    ax.bar(resgates_por_fundo['Instrumento (Nome)'], resgates_por_fundo['valor do resgate'],
           label='Resgates', width=0.4, align='center', color='red')
    ax.bar(aplicacoes_por_fundo['Nome do Fundo'], aplicacoes_por_fundo['valor da aplicacao'],
           label='Aplica√ß√µes', width=0.4, align='edge', color='green')
    ax.set_xlabel('Nome do Fundo')
    ax.set_ylabel('Valor (R$)')
    ax.set_title('Compara√ß√£o entre Resgates e Aplica√ß√µes por Fundo')
    ax.legend()
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    st.pyplot(fig)

    resgates_por_fundo['valor do resgate'] = resgates_por_fundo['valor do resgate'].apply(
        lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))
    aplicacoes_por_fundo['valor da aplicacao'] = aplicacoes_por_fundo['valor da aplicacao'].apply(
        lambda x: f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", "."))

    st.subheader("üìÑ Resgates por Fundo")
    st.dataframe(resgates_por_fundo)

    st.subheader("üìÑ Aplica√ß√µes por Fundo")
    st.dataframe(aplicacoes_por_fundo)

else:
    st.warning("‚ö†Ô∏è Fa√ßa upload de todos os arquivos para prosseguir.")
